package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"internplus-backend/graph/model"
)

// CreateIntern is the resolver for the createIntern field.
func (r *mutationResolver) CreateIntern(ctx context.Context, input model.NewInternInput) (*model.Intern, error) {
	// 构建 SQL 语句，可只插入部分字段
	query := `
		INSERT INTO interns (first_name, last_name, email, password)
		VALUES (?, ?, ?, ?)
	`
	res, err := r.DB.Exec(query, input.FirstName, input.LastName, input.Email, input.Password)
	if err != nil {
		return nil, err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return nil, err
	}

	// 返回刚创建的 Intern
	intern := &model.Intern{
		ID:        fmt.Sprintf("%d", id),
		FirstName: input.FirstName,
		LastName:  input.LastName,
		Email:     input.Email,
		Password:  input.Password,
	}
	return intern, nil
}

// Dummy is the resolver for the dummy field.
func (r *queryResolver) Dummy(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: Dummy - dummy"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
